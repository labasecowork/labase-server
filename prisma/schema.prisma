// Este es tu archivo de esquema de Prisma,
// puedes aprender más sobre él en la documentación: https://pris.ly/d/prisma-schema
// ¿Buscas formas de acelerar tus consultas o escalar fácilmente con tus funciones serverless o edge?
// Prueba Prisma Accelerate: https://pris.ly/cli/accelerate-init
// npx prisma migrate reset 
// npx prisma migrate dev --init
// npx prisma generate
// npx prisma studio 
//

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  //url       = env("DATABASE_URL_PROD")
  //directUrl = env("DIRECT_URL_PROD")
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL")
}

enum user_type {
  admin
  client
}

enum admin_role {
  superadmin
  manager
}

enum user_status {
  active
  suspended
  pending
}

enum notification_type {
  INFO
  SUCCESS
  ERROR
  ALERT
}
model Users {
  id                 String      @id @default(uuid())
  first_name         String
  last_name          String
  email              String      @unique
  password           String
  user_type          user_type?
  profile_image      String?
  phone              String?
  birth_date         DateTime?   @db.Date
  gender             String?
  status             user_status
  creation_timestamp DateTime?   @default(now())

  adminDetails          AdminDetails?
  userDetails           UserDetails?
  receivedNotifications Notification[] @relation("ReceivedNotifications")
  sentNotifications     Notification[] @relation("SentNotifications")

  @@map("users")
}

model AdminDetails {
  admin_id String   @id
  role     admin_role
  notes    String?

  user Users @relation(fields: [admin_id], references: [id], onDelete: Cascade)

  @@map("admin_details")
}

model UserDetails {
  user_id String   @id
  status  user_status

  user Users @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("user_details")
}

model Notification {
  id          String     @id @default(uuid())
  receiverId  String
  senderId    String?
  title       String
  description String
  type        notification_type
  createdAt   DateTime   @default(now())
  url         String?

  receiver Users  @relation("ReceivedNotifications", fields: [receiverId], references: [id])
  sender   Users? @relation("SentNotifications", fields: [senderId], references: [id])

  @@map("notifications")
}
