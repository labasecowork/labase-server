generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum user_type {
  admin
  client
  employee
}

enum admin_role {
  superadmin
  manager
}

enum user_status {
  active
  suspended
  pending
}

enum notification_type {
  info
  success
  error
  alert
}

enum space_type {
  unit
  shared_site
  full_room
}

enum access_type {
  public
  private
}

enum duration_unit {
  hour
  day
  week
  month
}

enum price_mode {
  individual
  group
}

enum reservation_status {
  pending
  confirmed
  cancelled
  in_progress
}

enum payment_status {
  pending
  ready
  approved
  canceled
  failed
}

enum article_status {
  pending
  accepted
  rejected
}

enum community_user_type {
  moderator
  member
}

enum reaction_type {
  like
  dislike
}

enum reaction_target {
  publication
  comment
  reply
}

enum attendance_type {
  entry
  exit
}

enum unit_of_measure {
  unit
  kilogram
  meter
  piece
}

enum company_type {
  internal
  tenant
}

enum gender {
  male
  female
  unspecified
}

enum reminder_frequency {
  daily
  weekly
  monthly
  yearly
}

model users {
  id                   String                @id @default(uuid())
  first_name           String
  last_name            String
  email                String                @unique
  password             String
  user_type            user_type?
  profile_image        String?
  phone                String?
  birth_date           DateTime?             @db.Date
  gender               gender                @default(unspecified)
  status               user_status
  creation_timestamp   DateTime              @default(now())
  admin_details        admin_details?
  employee_details     employee_details?
  user_details         user_details?
  reservations         reservation[]         @relation("user_reservations")
  payment_transactions payment_transaction[] @relation("user_payments")
  articles             articles[]            @relation("user_articles")

  visitors visitors[]

  @@map("users")
}

model admin_details {
  admin_id String     @id
  role     admin_role
  notes    String?

  user users @relation(fields: [admin_id], references: [id], onDelete: Cascade)

  @@map("admin_details")
}

model user_details {
  user_id String      @id
  status  user_status

  user users @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("user_details")
}

model work_areas {
  id          String   @id @default(uuid())
  name        String
  description String?
  capacity    Int
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  employees employee_details[]

  @@map("work_areas")
}

model companies {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  employees employee_details[]

  @@map("companies")
}

model employee_details {
  employee_id  String       @id
  work_area_id String?
  company_id   String?
  attendances  attendance[]

  user      users       @relation(fields: [employee_id], references: [id])
  work_area work_areas? @relation(fields: [work_area_id], references: [id], onDelete: SetNull)
  company   companies?  @relation(fields: [company_id], references: [id], onDelete: SetNull)

  @@index([work_area_id])
  @@index([company_id])
  @@map("employee_details")
}

model attendance {
  id          String          @id @default(uuid())
  employee_id String
  type        attendance_type
  date        DateTime        @db.Date
  check_time  DateTime        @db.Time

  employee employee_details @relation(fields: [employee_id], references: [employee_id], onDelete: Cascade)

  @@map("attendances")
}

model space {
  id              String      @id @default(uuid())
  name            String
  description     String?
  type            space_type
  access          access_type
  capacity_min    Int
  capacity_max    Int
  allow_by_unit   Boolean
  allow_full_room Boolean
  disabled        Boolean     @default(false)
  created_at      DateTime    @default(now())

  space_images   space_image[]
  space_benefits space_benefit[]
  prices         price[]
  reservations   reservation[]
  visitors       visitors[]

  @@map("spaces")
}

model space_image {
  id       String  @id @default(uuid())
  space_id String
  url      String
  alt      String?
  position Int     @default(0)

  space space @relation(fields: [space_id], references: [id], onDelete: Cascade)

  @@index([space_id, position])
  @@map("space_images")
}

model benefit {
  id          String  @id @default(uuid())
  name        String  @unique
  description String?

  spaces space_benefit[]

  @@map("benefits")
}

model space_benefit {
  space_id   String
  benefit_id String

  space   space   @relation(fields: [space_id], references: [id], onDelete: Cascade)
  benefit benefit @relation(fields: [benefit_id], references: [id], onDelete: Cascade)

  @@id([space_id, benefit_id])
  @@map("space_benefits")
}

model price {
  id       String        @id @default(uuid())
  space_id String
  duration duration_unit
  mode     price_mode
  amount   Float

  space space @relation(fields: [space_id], references: [id], onDelete: Cascade)

  @@unique([space_id, duration, mode])
  @@map("prices")
}

model reservation {
  id              String             @id @default(uuid())
  purchase_number String             @unique
  user_id         String
  space_id        String
  start_time      DateTime
  end_time        DateTime
  people          Int
  full_room       Boolean
  code_qr         String             @unique
  price           Decimal
  status          reservation_status @default(pending)
  created_at      DateTime           @default(now())

  user  users @relation("user_reservations", fields: [user_id], references: [id], onDelete: Cascade)
  space space @relation(fields: [space_id], references: [id], onDelete: Cascade)

  slots                reservation_slot[]
  payment_transactions payment_transaction[] @relation("reservation_payments")

  @@index([space_id, start_time, end_time])
  @@index([user_id, created_at])
  @@map("reservations")
}

model reservation_slot {
  id             String @id @default(uuid())
  reservation_id String
  slot_number    Int

  reservation reservation @relation(fields: [reservation_id], references: [id], onDelete: Cascade)

  @@unique([reservation_id, slot_number])
  @@map("reservation_slots")
}

model payment_transaction {
  id                 String         @id @default(uuid())
  transaction_id     String         @db.VarChar(50)
  purchase_number    String         @unique @db.VarChar(50)
  amount             Float
  authorization_code String?        @db.VarChar(20)
  status             payment_status
  action_description String?        @db.VarChar(100)
  card_masked        String?        @db.VarChar(25)
  transaction_date   String         @db.VarChar(20)
  error_code         Int?
  error_message      String?        @db.VarChar(100)
  created_at         DateTime       @default(now())

  reservation_id String?
  reservation    reservation? @relation(fields: [reservation_id], references: [id], onDelete: Cascade, name: "reservation_payments")

  user_id String?
  user    users?  @relation("user_payments", fields: [user_id], references: [id])

  @@index([status, created_at])
  @@map("payment_transactions")
}

model article_categories {
  id          String  @id @default(uuid())
  name        String  @unique
  description String?

  articles articles[]

  @@map("article_categories")
}

model articles {
  id           String  @id @default(uuid())
  author_id    String
  category_id  String
  title        String
  content      String
  banner       String?
  resume       String?
  reading_time Int

  publication_timestamp DateTime?
  status                article_status @default(pending)

  author           users              @relation("user_articles", fields: [author_id], references: [id], onDelete: Cascade)
  article_category article_categories @relation(fields: [category_id], references: [id], onDelete: Cascade)

  @@index([status])
  @@map("articles")
}

model newsletter_subscriber {
  id         String   @id @default(uuid())
  name       String
  email      String   @unique
  created_at DateTime @default(now())

  @@map("newsletter_subscribers")
}

model products {
  id              String          @id @default(uuid())
  name            String
  photo_url       String
  brand_id        String
  unit_of_measure unit_of_measure
  description     String?
  observations    String?
  quantity        Int

  brand product_brand @relation(fields: [brand_id], references: [id], onDelete: Restrict)

  @@map("products")
}

model product_brand {
  id         String   @id @default(uuid())
  name       String   @unique
  created_at DateTime @default(now())

  products products[]

  @@map("product_brand")
}

model visitors {
  id         String    @id @default(uuid())
  dni        String?   @unique
  ruc        String?   @unique
  first_name String
  last_name  String
  phone      String?
  email      String?
  user_id    String
  space_id   String
  entry_time DateTime
  exit_time  DateTime?
  created_at DateTime  @default(now())

  user  users @relation(fields: [user_id], references: [id], onDelete: Cascade)
  space space @relation(fields: [space_id], references: [id], onDelete: Cascade)

  @@index([user_id, created_at])
  @@index([space_id, created_at])
  @@map("visitors")
}

model reminders {
  id           String             @id @default(uuid())
  name         String
  phone_number String
  message      String
  send_date    DateTime
  frequency    reminder_frequency
  is_active    Boolean            @default(true)
  created_at   DateTime           @default(now())
  updated_at   DateTime           @updatedAt

  @@map("reminders")
}
