// puedes aprender más sobre él en la documentación: https://pris.ly/d/prisma-schema
// ¿Buscas formas de acelerar tus consultas o escalar fácilmente con tus funciones serverless o edge?
// Prueba Prisma Accelerate: https://pris.ly/cli/accelerate-init
// npx prisma generate
// npx prisma migrate reset
// npx prisma migrate dev --init
// npx prisma studio

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum user_type {
  admin // Usuario administrador (superadmin o manager)
  client // Usuario cliente que reserva espacios
  employee // Usuario empleado que trabaja en la empresa
}

enum admin_role {
  superadmin // Rol con permisos totales (crea otros superadmins y managers)
  manager // Rol con permisos limitados (solo puede crear managers)
}

enum user_status {
  active // Usuario activo
  suspended // Usuario suspendido
  pending // Usuario pendiente de verificación o activación
}

enum notification_type {
  INFO
  SUCCESS
  ERROR
  ALERT
}

enum SpaceType {
  UNIT // Unidad individual (privada)
  SHARED_SITE // Sitio individual en espacio compartido
  FULL_ROOM // Reserva de todo el espacio (sala completa)
}

enum AccessType {
  PUBLIC // Visible y reservable por cualquier cliente
  PRIVATE // Reservable solo por admin o bajo condiciones especiales
}

enum DurationUnit {
  HOUR
  DAY
  WEEK
  MONTH
}

enum PriceMode {
  INDIVIDUAL // Precio por sitio / unidad
  GROUP // Precio por reserva de sala completa
}

enum ReservationStatus {
  PENDING // Estado inicial al crear una reserva. Aún no se ha pagado.
  CONFIRMED // Estado asignado cuando el pago fue APROBADO por el proveedor (Niubiz).
  CANCELLED // Estado cuando un admin o cliente cancela manualmente la reserva, o vence el tiempo de espera sin pagar.
  IN_PROGRESS // Estado al momento de escanear el código QR de una reserva CONFIRMADA **y** dentro del horario.
}

enum PaymentStatus {
  PENDING // Estado inicial al crear el flujo de pago (aún sin generar sessionToken).
  READY // Estado cuando se ha generado correctamente el `sessionToken` y script de pago (checkout.js).
  APPROVED // Estado final cuando el proveedor aprueba el pago del cliente.
  CANCELED // Pago cancelado manualmente por el usuario (desde frontend o backend).
  FAILED // El proveedor rechazó el pago (tarjeta inválida, error interno, etc.).
}

enum article_status {
  pending
  accepted
  rejected
}

enum community_user_type {
  moderator // Moderador de la comunidad
  member // Miembro de la comunidad
}

enum ReactionType {
  like // Me gusta
  dislike // No me gusta
}

enum ReactionTarget {
  publication // Reacción a una publicación
  comment // Reacción a un comentario
  reply // Reacción a una respuesta
}

enum AttendanceType {
  ENTRY // Entrada
  EXIT // Salida
}

enum unit_of_measure {
  unit // unidad
  kilogram // kilogramo
  meter // metro
  piece // pieza
}

model Users {
  id                 String      @id @default(uuid()) // Identificador único del usuario
  first_name         String // Nombre del usuario
  last_name          String // Apellido del usuario
  email              String      @unique // Correo electrónico único
  password           String // Contraseña hasheada
  user_type          user_type? // Tipo de usuario (admin o client)
  profile_image      String? // Imagen de perfil del usuario
  phone              String? // Número telefónico del usuario
  birth_date         DateTime?   @db.Date // Fecha de nacimiento
  gender             String? // Género del usuario
  status             user_status // Estado actual del usuario
  creation_timestamp DateTime?   @default(now()) // Fecha de creación del registro

  adminDetails          AdminDetails? // Relación uno a uno si es admin
  employeeDetails       EmployeeDetails?
  userDetails           UserDetails? // Relación uno a uno para detalles generales
  receivedNotifications Notification[]       @relation("ReceivedNotifications") // Notificaciones recibidas
  sentNotifications     Notification[]       @relation("SentNotifications") // Notificaciones enviadas
  reservations          Reservation[]        @relation("UserReservations") // Reservas realizadas por el usuario
  paymentTransactions   PaymentTransaction[] @relation("UserPayments")
  articles              Articles[]           @relation("UserArticles")

  @@map("users")
}

model AdminDetails {
  admin_id String     @id // ID del admin (igual al ID en Users)
  role     admin_role // Rol del administrador
  notes    String? // Notas administrativas adicionales

  user Users @relation(fields: [admin_id], references: [id], onDelete: Cascade) // Relación con Users

  @@map("admin_details")
}

model UserDetails {
  user_id String      @id // ID del usuario
  status  user_status // Estado del usuario (repetido para claridad o control local)

  user Users @relation(fields: [user_id], references: [id], onDelete: Cascade) // Relación con Users

  @@map("user_details")
}

model EmployeeDetails {
  employee_id String       @id
  user        Users        @relation(fields: [employee_id], references: [id])
  attendances Attendance[]

  @@map("employee_details")
}

model Attendance {
  id          String         @id @default(uuid())
  employee_id String
  type        AttendanceType
  date        DateTime       @db.Date
  check_time  DateTime       @db.Time

  employee EmployeeDetails @relation(fields: [employee_id], references: [employee_id], onDelete: Cascade)

  @@map("attendances")
}

model Space {
  id            String     @id @default(uuid()) // ID del espacio
  name          String // Nombre del espacio (ej: Hangar, Unidad)
  description   String? // Descripción opcional
  type          SpaceType // Tipo de espacio (privado, compartido, etc.)
  access        AccessType // Acceso público o privado
  capacityMin   Int // Mínimo de personas por reserva
  capacityMax   Int // Máximo de personas permitidas en el espacio
  allowByUnit   Boolean // ¿Se permiten reservas “por unidad” (sitio individual).
  allowFullRoom Boolean // permite reservar toda la sala de una sola vez.
  disabled      Boolean    @default(false) // ¿Deshabilitado?
  createdAt     DateTime   @default(now()) // Fecha de creación del espacio
  images        String[] // URLs de imágenes en S3

  spaceBenefits SpaceBenefit[]
  prices        Price[] // Relación: precios por duración
  reservations  Reservation[] // Relación: reservas registradas para este espacio

  @@map("spaces")
}

model Benefit {
  id          String  @id @default(uuid())
  name        String  @unique
  description String?

  spaces SpaceBenefit[]

  @@map("benefits")
}

model SpaceBenefit {
  spaceId   String
  benefitId String

  space   Space   @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  benefit Benefit @relation(fields: [benefitId], references: [id], onDelete: Cascade)

  @@id([spaceId, benefitId])
  @@map("space_benefits")
}

model Price {
  id       String       @id @default(uuid()) // ID del registro de precio
  spaceId  String // FK al espacio asociado
  duration DurationUnit // Tipo de duración (hora, día, semana)
  mode     PriceMode
  amount   Float // Monto en moneda local

  space Space @relation(fields: [spaceId], references: [id], onDelete: Cascade) // Relación con Space

  @@unique([spaceId, duration, mode])
  @@map("prices")
}

model Reservation {
  id             String            @id @default(uuid()) // ID de la reserva
  purchaseNumber String            @unique // Número de compra generado
  userId         String // FK al usuario que reservó
  spaceId        String // FK al espacio reservado
  startTime      DateTime // Fecha y hora de inicio de la reserva
  endTime        DateTime // Fecha y hora de fin de la reserva
  people         Int // Número total de personas
  fullRoom       Boolean // ¿Se reservó todo el espacio?
  codeQr         String            @unique // Codigo QR
  price          Decimal // Precio a cobrar
  status         ReservationStatus @default(PENDING)
  createdAt      DateTime          @default(now()) // Timestamp de creación

  user  Users @relation("UserReservations", fields: [userId], references: [id], onDelete: Cascade)
  space Space @relation(fields: [spaceId], references: [id], onDelete: Cascade)

  slots               ReservationSlot[] // Relación a los slots individuales (opcional)
  paymentTransactions PaymentTransaction[] @relation("ReservationPayments")

  @@index([spaceId, startTime, endTime]) // Index para verificar conflictos
  @@map("reservations")
}

model ReservationSlot {
  id            String @id @default(uuid()) // ID del slot individual
  reservationId String // FK a la reserva principal
  slotNumber    Int // Número de sitio asignado (1 a N)

  reservation Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade)

  @@unique([reservationId, slotNumber]) // Un sitio por reserva
  @@map("reservation_slots")
}

model NewsletterSubscriber {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  createdAt DateTime @default(now())

  @@map("newsletter_subscribers")
}

model PaymentTransaction {
  id                String        @id @default(uuid())
  transactionId     String        @map("transaction_id") @db.VarChar(50)
  purchaseNumber    String        @unique @map("purchase_number") @db.VarChar(50)
  amount            Float
  authorizationCode String?       @map("authorization_code") @db.VarChar(20)
  status            PaymentStatus
  actionDescription String?       @map("action_description") @db.VarChar(100)
  cardMasked        String?       @map("card_masked") @db.VarChar(25)
  transactionDate   String        @map("transaction_date") @db.VarChar(20)
  errorCode         Int?          @map("error_code")
  errorMessage      String?       @map("error_message") @db.VarChar(100)
  createdAt         DateTime      @default(now())

  reservationId String?
  reservation   Reservation? @relation(fields: [reservationId], references: [id], onDelete: Cascade, name: "ReservationPayments")

  userId String?
  user   Users?  @relation("UserPayments", fields: [userId], references: [id])

  @@map("payment_transactions")
}

model Notification {
  id          String            @id @default(uuid()) // ID de la notificación
  receiverId  String // FK del usuario receptor
  senderId    String? // FK del emisor (opcional)
  title       String // Título del mensaje
  description String // Cuerpo del mensaje
  type        notification_type // Tipo de notificación
  createdAt   DateTime          @default(now()) // Timestamp de envío
  url         String? // Enlace relacionado (opcional)

  receiver Users  @relation("ReceivedNotifications", fields: [receiverId], references: [id])
  sender   Users? @relation("SentNotifications", fields: [senderId], references: [id])

  @@map("notifications")
}

model ArticleCategories {
  id          String  @id @default(uuid())
  name        String  @unique
  description String?

  articles Articles[]

  @@map("article_categories")
}

model Articles {
  id           String  @id @default(uuid())
  author_id    String
  category_id  String
  title        String
  content      String
  banner       String?
  resume       String
  reading_time Int

  publication_timestamp DateTime?
  status                article_status @default(pending)

  author          Users             @relation("UserArticles", fields: [author_id], references: [id], onDelete: Cascade)
  articleCategory ArticleCategories @relation(fields: [category_id], references: [id], onDelete: Cascade)

  @@index([status])
  @@map("articles")
}

model products {
  id              String          @id @default(uuid()) // PK interno y código / serie único (UUID)
  name            String // Nombre del producto
  photo_url       String // URL de la foto en AWS S3
  brand           String // Marca del producto
  unit_of_measure unit_of_measure // Unidad de medida
  description     String? // Descripción detallada
  observations    String? // Notas adicionales
  quantity        Int // Stock disponible

  @@map("products")
}
